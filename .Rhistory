main = "AR(2) Population PACF")
abline(h = 0)
#4. phi1 < 0, phi2 < 0
y = ARMAacf(ar = c(-0.2, -0.5), lag.max = 20,pacf=T)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
install.packages("gbm")
shiny::runApp('Desktop/catapult/catapult_shiny')
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(shinyWidgets)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(gganimate)
library(zoo)
library(shinydashboard)
library(howler)
library(video)
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/test')
??shinydashboard::box()
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/test')
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
shiny::runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
# PACKAGES --------------------------------------------------------------------------
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(shinyWidgets)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(gganimate)
library(zoo)
library(shinydashboard)
library(howler)
library(video)
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(tradingeconomics)
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
library(showtext)
showtext_auto()
library(vars)
library(tseries)
library(gridExtra)
library(glmnet)
#read table
short_flow <- read.csv("./5Ydata/short_flow_total.csv")
short_flow %>%
dplyr::select(-exchange_reserve_increase, -current_account_surplus, -FDI_flow) -> short_flow
View(short_flow)
knitr::opts_chunk$set(echo = TRUE)
# ACF plot
par(mfrow=c(2,2))
#1. phi1 > 0, phi2 > 0
y = ARMAacf(ar = c(0.2,0.5), lag.max = 20)
y = y[2:21]
plot(y, x = 1:20, type = "h", ylim = c(-1,1), xlab = "h", ylab = "Autocorrelation", main = "AR(2) Population ACF")
abline(h = 0)
#2. phi1 < 0, phi2 > 0
y = ARMAacf(ar = c(-0.2,0.5), lag.max = 20)
y = y[2:21]
plot(y, x = 1:20, type = "h", ylim = c(-1,1), xlab = "h", ylab = "Autocorrelation", main = "AR(2) Population ACF")
abline(h = 0)
#3. phi1 > 0, phi2 < 0
y = ARMAacf(ar = c(0.2,-0.5), lag.max = 20)
y = y[2:21]
plot(y, x = 1:20, type = "h", ylim = c(-1,1), xlab = "h", ylab = "Autocorrelation", main = "AR(2) Population ACF")
abline(h = 0)
#4. phi1 < 0, phi2 < 0
y = ARMAacf(ar = c(-0.2,-0.5), lag.max = 20)
y = y[2:21]
plot(y, x = 1:20, type = "h", ylim = c(-1,1), xlab = "h", ylab = "Autocorrelation", main = "AR(2) Population ACF")
abline(h = 0)
# PACF plot
par(mfrow=c(2,2))
#1. phi1 > 0, phi2 > 0
y = ARMAacf(ar = c(0.2, 0.5), lag.max = 20,pacf=T)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
#2. phi1 < 0, phi2 > 0
y = ARMAacf(ar = c(-0.2, 0.5), lag.max = 20,pacf=T)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
#3. phi1 > 0, phi2 < 0
y = ARMAacf(ar = c(0.2, -0.5), lag.max = 20,pacf=T)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
#4. phi1 < 0, phi2 < 0
y = ARMAacf(ar = c(-0.2, -0.5), lag.max = 20,pacf=T)
plot(y, x = 1:20,
type = "h",
ylim = c(-1,1),
xlab = "h",
ylab = "Partial Autocorrelation",
main = "AR(2) Population PACF")
abline(h = 0)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(tradingeconomics)
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
library(showtext)
showtext_auto()
library(vars)
library(tseries)
library(gridExtra)
library(glmnet)
full_short_flow <- read.csv("./5Ydata/short_flow_total.csv")
#the variable date is not useful in fitting VAR model, and its existence may cause error, delete it
full_short_flow %>% dplyr::select(-date, -fedfunds, -short_term_flow) -> full_short_flow
View(full_short_flow)
full_short_flow
full_short_flow <- read.csv("./5Ydata/short_flow_total.csv")
full_short_flow
#the variable date is not useful in fitting VAR model, and its existence may cause error, delete it
full_short_flow %>% dplyr::select(-date,
-fedfunds,
-exchange_reserve_increase,
-current_account_surplus,
-FDI_flow_quar,
-FDI_flow_month,
-current_account_surplus.1,
-real_GDP_increase) -> full_short_flow
full_short_flow <- read.csv("./5Ydata/short_flow_total.csv")
#the variable date is not useful in fitting VAR model, and its existence may cause error, delete it
full_short_flow %>% dplyr::select(-date,
-exchange_reserve_increase,
-current_account_surplus,
-FDI_flow_quar,
-FDI_flow_month,
-current_account_surplus.1,
-real_GDP_increase) -> full_short_flow
View(full_short_flow)
full_short_flow <- read.csv("./5Ydata/short_flow_total.csv")
#the variable date is not useful in fitting VAR model, and its existence may cause error, delete it
full_short_flow %>% dplyr::select(-date,
-exchange_reserve_increase,
-current_account_surplus,
-FDI_flow_quar,
-FDI_flow_month,
-current_account_surplus.1) -> full_short_flow
View(full_short_flow)
full_short_flow_ts <- ts(full_short_flow)
full_short_flow_ts
#A commonly used rule of thumb is to set the maximum lag length to be less than or equal to one-third of the sample size
VARselect(full_short_flow_ts, lag.max = 15, type = "const")
var_model <- VAR(full_short_flow, p = 8, type = "const")
summary(var_model)
var_model <- VAR(full_short_flow, p = 7, type = "const")
summary(var_model)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(tradingeconomics)
library(tidyverse)
library(readxl)
library(lubridate)
library(zoo)
library(showtext)
showtext_auto()
library(vars)
library(tseries)
library(gridExtra)
library(glmnet)
library(MASS)
all_data <- read.csv("./5Ydata/short_flow_total.csv")
all_data %>%
mutate(date = as.Date(date,
format = "%m/%d/%y")) -> all_data
#select variables
all_data %>%
dplyr::select(fedfunds, EXCHUS, shibor_value, SHclose, real_GDP_increase, short_term_flow) -> short_term
short_term %>%
ggplot(aes(x = date,
y = fedfunds)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("美国联邦利率") +
ggtitle("美国联邦利率时间序列图") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
b <- boxcox(lm(short_term$fedfunds ~ 1))
lambda <- b$x[which.max(b$y)]
new_fedfunds <- (fedfunds ^ lambda - 1) / lambda
new_fedfunds <- (short_term$fedfunds ^ lambda - 1) / lambda
new_fedfunds
plot(new_fedfunds)
plot(new_fedfunds, type = "l")
lambda
new_fedfunds <- ((short_term$fedfunds ^ lambda) - 1) / lambda
plot(new_fedfunds, type = "l")
#diff
Dshort <- data.frame(Dfedfunds = diff(short_term$fedfunds),
DEXCHUS   = diff(short_term$EXCHUS),
Dshibor_value = diff(short_term$shibor_value),
DSHclose = diff(short_term$SHclose),
Dreal_GDP_increase = diff(short_term$real_GDP_increase),
Dshort_term_flow = diff(short_term$short_term_flow))
kpss.test(Dshort$Dfedfunds, null = "Level")
kpss.test(Dshort$Dfedfunds, null = "Trend")
kpss.test(Dshort$DEXCHUS, null = "Level")
kpss.test(Dshort$DEXCHUS, null = "Trend")
kpss.test(Dshort$Dshibor_value, null = "Level")
kpss.test(Dshort$Dshibor_value, null = "Trend")
kpss.test(Dshort$DSHclose, null = "Level")
kpss.test(Dshort$DSHclose, null = "Trend")
kpss.test(Dshort$Dreal_GDP_increase, null = "Level")
kpss.test(Dshort$Dreal_GDP_increase, null = "Trend")
kpss.test(Dshort$Dshort_term_flow, null = "Level")
kpss.test(Dshort$Dshort_term_flow, null = "Trend")
plot(Dshort$Dfedfunds, type = ";")
plot(Dshort$Dfedfunds, type = "l")
ggplot(Dshort,
aes(y = Dfedfunds)) +
geom_line(stat = "identity")
all_data <- read.csv("./5Ydata/short_flow_total.csv")
all_data %>%
mutate(date = as.Date(date,
format = "%m/%d/%y")) -> all_data
#select variables
all_data %>%
dplyr::select(date,fedfunds, EXCHUS, shibor_value, SHclose, real_GDP_increase, short_term_flow) -> short_term
short_term %>%
ggplot(aes(x = date,
y = fedfunds)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("美国联邦利率") +
ggtitle("美国联邦利率时间序列图") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#diff
Dshort <- data.frame(Dfedfunds = diff(short_term$fedfunds),
DEXCHUS   = diff(short_term$EXCHUS),
Dshibor_value = diff(short_term$shibor_value),
DSHclose = diff(short_term$SHclose),
Dreal_GDP_increase = diff(short_term$real_GDP_increase),
Dshort_term_flow = diff(short_term$short_term_flow),
Date = all_data$date)
all_data <- read.csv("./5Ydata/short_flow_total.csv")
all_data %>%
mutate(date = as.Date(date,
format = "%m/%d/%y")) -> all_data
#select variables
all_data %>%
dplyr::select(date,fedfunds, EXCHUS, shibor_value, SHclose, real_GDP_increase, short_term_flow) -> short_term
all_data$date[-1,]
all_data$date[-1]
#diff
Dshort <- data.frame(Dfedfunds = diff(short_term$fedfunds),
DEXCHUS   = diff(short_term$EXCHUS),
Dshibor_value = diff(short_term$shibor_value),
DSHclose = diff(short_term$SHclose),
Dreal_GDP_increase = diff(short_term$real_GDP_increase),
Dshort_term_flow = diff(short_term$short_term_flow),
Date = all_data$date[-1])
Dshort %>%
ggplot(aes(x = Date,
y = Dfedfunds)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("美国联邦利率") +
ggtitle("美国联邦利率时间序列图") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Dshort %>%
ggplot(aes(x = Date,
y = Dfedfunds)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("美国联邦利率") +
ggtitle("美国联邦利率时间序列图（差分变化后）") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Dshort %>%
ggplot(aes(x = Date,
y = Dshibor_value)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("上海银行间同业拆借利率") +
ggtitle("上海银行间同业拆借利率时间序列图（差分变换后）") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Dshort %>%
ggplot(aes(x = Date,
y = DEXCHUS)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("人民币兑美元汇率") +
ggtitle("人民币兑美元汇率时间序列图（差分变换后）") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Dshort %>%
ggplot(aes(x = Date,
y = DSHclose)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("上海证券交易所综合股价指数") +
ggtitle("上海证券交易所综合股价指数时间序列图（差分变换后）") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
View(all_data)
View(Dshort)
Dshort %>%
ggplot(aes(x = Date,
y = Dshort_term_flow)) +
geom_line() +
scale_x_date(date_breaks = "1 year",
date_labels = "%y/%m") +
xlab("日期") +
ylab("中国短期国际资本流动") +
ggtitle("中国短期国际资本流动时间序列图（差分变换后）") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#acf
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
main = "ACF")
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
main = "PACF")
par(mrow = c(2,1))
par(mrow = c(2,1))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
main = "ACF")
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
main = "PACF")
par(mfrow = c(2,1))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
main = "ACF")
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
main = "PACF")
par(mfrow = c(1,2))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
main = "ACF")
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
main = "PACF")
par(mfrow = c(1,2))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "ACF")
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "PACF")
par(mfrow = c(1,2))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "ACF")
abline(h = 0)
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "PACF")
abline(h = 0)
par(mfrow = c(1,2))
plot(ARMAacf(ar =-0.6, ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "ACF")
abline(h = 0)
plot(ARMAacf(ar =-0.6, ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
main = "PACF")
abline(h = 0)
par(mfrow = c(1,2))
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "ACF")
abline(h = 0)
plot(ARMAacf(ar =c(-0.2,0.48), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "PACF")
abline(h = 0)
par(mfrow = c(1,2))
plot(ARMAacf(ar =-0.6, ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "ACF")
abline(h = 0)
plot(ARMAacf(ar =-0.6, ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "PACF")
abline(h = 0)
par(mfrow = c(1,2))
plot(ARMAacf(ar =c(-1.8,-0.81), ma = 0, lag.max = 5),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "ACF")
abline(h = 0)
plot(ARMAacf(ar =c(-1.8,-0.81), ma = 0, lag.max = 5, pacf = TRUE),
type = "h",
xlab = "h",
ylab = "Partial Autocorrelation",
ylim = c(-1,1),
main = "PACF")
abline(h = 0)
ARMAtoMA(ar = c(1.1,0.3), ma = 0, lag.max = 5)
ARMAtoMA(ar = c(-1.1,-0.3), ma = 0, lag.max = 5)
ARMAacf(ar =c(1.1,0.3), ma = 0, lag.max = 5)
ARMAacf(ar =c(1.1,0.3),ma=0, lag.max = 5,pacf=T)
round(ARMAacf(ar =c(1.1,0.3),ma=0, lag.max = 5,pacf=T),3)
ARMAtoMA(ar =0.6, ma = 0.2, lag.max = 5)
ARMAacf(ar =0, ma =c(0.8,-0.15), lag.max = 5,pacf=T)
shiny::runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
runApp('Desktop/catapult/catapult_shiny')
setwd("~/Desktop/catapult/catapult_shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
